//DCR v5.0
let PI = 3.1415926535;

var GL_BOT;
var GL_ACT;

var GL_ACT_TOOL;
var GL_ACT_SET_FLAG = 0;  //设置/列表操作切换标志
var GL_ACT_TEST_FLAG = 0; //dbg=2时,test辅助标志
var GL_ACT_MAKE_FLAG = 1;

var GL_SCALE = 1.2;

var _DEBUG = 0;
//0:正常展示模式
//1:全范围调试
//2:限定范围调试
var GL_DEBUG_SEND = 1;  //在_DEBUG = 0模式下是否开启随机指令测试


//循环播放?
var GL_CICLE_RUN = 1;

//动作增强
var GL_EN_IMP = 1;

//动作更新频率控制
var GL_FRAMERATE = 45;  //一秒刷新次数
var GL_TM_XX = GL_EN_IMP == 0 ? 0.15 : 1.5; //？
var GL_TM_SG = 0;

//
var GL_ENABLE_FLG = 0; //同步标志位

var DICT = { 'TOL': [0, 5], 'HEAD': [6, 14], 'BODY': [15, 19], 'HANDS': [20, 28] };
var SUB_ASA = {
	//
	'INIT': {
		'UP_INS': 10,
		'LOOPINV': 0,
		'USE': [[0, 28]], //全段
		'CMDS': [[]]
	},
	//
	'blink': {
		'UP_INS': 10,
		'LOOPINV': 30,
		'USE': [[10, 11]],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, -6, 1, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -6, 1, 39, 10, 10, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -6, 1, 39, 6, 5, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -6, 1, 39, 8, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -6, 1, 39, 8, 2, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -6, 1, 39, 8, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14]]
	},
	'flow': {
		'UP_INS': 10,
		'LOOPINV': 0,
		'USE': [[1, 1]],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, -12, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, -10, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, -5, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, -15, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, -1, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
		],
	},
	'shakehead': {
		'UP_INS': 10,
		'LOOPINV': 10,
		'USE': [DICT['HEAD']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, -1, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -9, 0, 39, 7, 7, 21, 0, 9, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -11, -19, 39, 7, 7, 21, 0, 9, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -15, -14, 39, 7, 7, 21, 0, 9, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -15, 19, 39, 7, 7, 21, 0, 9, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -15, 4, 39, 7, 7, 21, 0, 9, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -15, -23, 39, 7, 7, 21, 0, 9, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -15, 6, 39, 7, 7, 21, 0, 9, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -15, -11, 39, 7, 7, 21, 0, 9, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -13, -1, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14]],
	},
	'roundhead': {
		'UP_INS': 10,
		'LOOPINV': 10,
		'USE': [[6, 9]],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 17, 30, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 17, 6, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 15, -21, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -3, -21, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, -21, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, 3, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, 30, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 17, 30, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 1, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14]]
	},
	'shakebody': {
		'UP_INS': 10,
		'LOOPINV': 0,
		'USE': [DICT['BODY']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 2, 6, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, -8, 6, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 15, 6, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 1, 6, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, -14, 6, -2, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, -14, 6, 4, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, -1, -1, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, -1, -1, -6, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, -17, -1, -6, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, -1, -1, -1, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, -1, -1, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14]],
	},
	'itis': {
		'UP_INS': 10,
		'LOOPINV': -1,
		'USE': [DICT['HEAD'], DICT['HANDS']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 4, 0, 39, 9, 9, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 56, -10, 14, 55, -6, 14],
			[0, 0, 0, 0, 0, 0, 80, 11, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 151, -10, 14, 151, -6, 14],
			[0, 0, 0, 0, 0, 0, 80, 14, 0, 39, 8, 7, 21, 0, 15, 0, 0, 0, 42, -16, 56, -10, 118, 151, 7, 14, 151, 21, 14],
			[0, 0, 0, 0, 0, 0, 80, 14, 0, 39, 9, 8, 21, 0, 15, 0, 0, 0, 42, -16, 56, -10, 118, 156, 30, 15, 151, 25, 14],
			[0, 0, 0, 0, 0, 0, 80, 10, 0, 39, 9, 8, 21, 0, 44, 0, 0, 0, 42, -16, 56, -10, 118, 151, -10, 14, 151, -6, 14],
			[0, 0, 0, 0, 0, 0, 80, -4, 0, 39, 8, 7, 21, 0, 44, 0, 0, 0, 42, -16, 56, -10, 118, 113, -10, 14, 119, -6, 14],
			[0, 0, 0, 0, 0, 0, 80, 15, 0, 39, 8, 7, 21, 0, 44, 0, 0, 0, 42, -16, 56, -10, 118, 159, -10, 14, 164, -6, 14],
			[0, 0, 0, 0, 0, 0, 80, 8, 0, 39, 8, 7, 21, 0, 44, 0, 0, 0, 42, -16, 56, -10, 118, 33, -10, 14, 22, -6, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 1, 39, 8, 7, 21, 0, 44, 0, 0, 0, 42, -16, 56, -10, 118, 33, -10, 14, 22, -6, 14]]
	},
	'walk': {
		'UP_INS': 10,
		'LOOPINV': 10,
		'USE': [DICT['HEAD'], DICT['HANDS'], DICT['TOL'], DICT['BODY']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 83, 0, 80, 0, 0, 39, 7, 7, 21, 1, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[9, 0, 0, 0, 83, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, -15, 4, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[9, 0, 0, 0, 83, 0, 80, -5, 0, 39, 7, 7, 21, 0, 0, -15, 4, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[75, 0, 0, 0, 83, 0, 80, -5, 0, 39, 7, 7, 21, 0, 0, -15, 4, 0, 42, -16, 56, -10, 118, -25, 13, 14, -24, 7, 14],
			[89, 0, 0, 0, 78, 0, 80, -5, -1, 39, 7, 7, 21, 0, 0, 1, 2, 0, 42, -16, 56, -10, 118, 6, 13, -1, 9, 6, 3],
			[89, 0, 0, 0, 8, 0, 80, -8, -1, 39, 7, 7, 21, 0, 0, -3, 9, 0, 42, -16, 56, -10, 118, 6, 13, -1, 9, 6, 3],
			[89, 0, 0, 0, -77, 0, 80, -8, -1, 39, 7, 7, 21, 0, 0, -3, 9, 0, 42, -16, 56, -10, 118, 6, 13, -1, 9, 6, 3],
			[89, 0, 0, 0, -77, 0, 80, -2, -1, 39, 7, 7, 21, 4, 0, -16, 9, 0, 42, -16, 56, -10, 118, 6, 13, -1, 9, 6, 3],
			[89, 0, 0, 0, -77, 0, 80, -2, -1, 39, 7, 7, 21, 0, 0, -16, 9, 0, 42, -16, 56, -10, 118, -25, 13, -1, -25, 6, 3],
			[-55, 0, 0, 0, -77, 0, 80, -2, -1, 39, 7, 7, 21, 0, 0, -16, 9, 0, 42, -16, 56, -10, 118, -25, 13, -1, -25, 6, 3],
			[-102, 0, 0, 0, -77, 0, 80, -2, -1, 39, 7, 7, 21, 0, 0, -16, 9, 0, 42, -16, 56, -10, 118, -25, 13, -1, -25, 6, 3],
			[-102, 0, 0, 0, -77, 0, 80, -3, -1, 39, 7, 7, 21, 0, 0, 10, 9, 0, 42, -16, 56, -10, 118, 39, 13, -1, 18, 6, 3],
			[-102, 0, 0, 0, -77, 0, 80, -6, -1, 39, 7, 7, 21, 0, 0, 0, 9, 0, 42, -16, 56, -9, 118, 5, 13, -1, 0, 6, 3],
			[-102, 0, 0, 0, 3, 0, 80, -6, -1, 39, 7, 7, 21, 0, 0, 0, 9, 0, 42, -16, 56, -9, 118, 5, 13, -1, 0, 6, 3],
			[-102, 0, 0, 0, 97, 0, 80, -6, -1, 39, 7, 7, 21, 0, 0, 0, 9, 0, 42, -16, 56, -9, 118, 5, 13, -1, 0, 6, 3],
			[-102, 0, 0, 0, 97, 0, 80, -6, -1, 39, 7, 7, 21, 0, 0, -8, 9, 0, 42, -16, 56, -9, 118, 5, 13, -1, 0, 6, 3],
			[-5, 0, 0, 0, 97, 0, 80, -6, -1, 39, 7, 7, 21, 0, 0, -8, 9, 0, 42, -16, 56, -9, 118, 5, 13, -1, 0, 6, 3],
			[-5, 0, 0, 0, 97, 0, 80, -1, -1, 39, 7, 7, 21, 0, 0, -1, 9, 0, 42, -16, 56, -9, 118, 5, 13, -1, 0, 6, 3],
			[-5, 0, 0, 0, 48, 0, 80, -1, -1, 39, 7, 7, 21, 0, 0, -1, 9, 0, 42, -16, 56, -9, 118, 5, 13, -1, 0, 6, 3],
			[-5, 0, 0, 0, -2, 0, 80, -1, -1, 39, 7, 7, 21, 0, 0, -1, 9, 0, 42, -16, 56, -9, 118, 5, 13, 17, 0, 6, 20],
			[-5, 0, 0, 0, -2, 0, 80, -1, -1, 39, 7, 7, 21, 0, 0, -1, 9, 0, 42, -16, 56, -9, 118, 5, 13, 3, 0, 6, 4]]
	},
	'walkback': { //sad
		'UP_INS': 10,
		'LOOPINV': -1,
		'USE': [DICT['HEAD'], DICT['HANDS'], DICT['TOL'], DICT['BODY']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -13, 0, 39, 7, 7, 21, 0, 35, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, 0, 39, 6, 5, 21, 0, 35, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, 0, 39, 6, 5, 21, 0, 35, 5, 0, 0, 42, -16, 56, -10, 38, 3, 7, 14, 9, 7, 14],
			[0, 2, -29, 0, 0, 0, 80, -17, 0, 39, 6, 5, 21, 0, 35, 9, -1, 0, 42, -16, 56, -10, 38, 3, 7, 14, 9, 7, 14],
			[0, 6, -60, 0, 0, 0, 80, -17, 0, 39, 7, 6, 21, 0, 35, 16, -1, 0, 42, -16, 56, -10, 38, 3, 7, 14, 9, 7, 14],
			[0, -3, -180, 0, 0, 0, 80, -17, 0, 39, 7, 6, 22, 0, 35, 9, -1, 0, 42, -16, 56, -10, 38, 3, 7, 14, 9, 7, 14],
			[0, 0, -180, 0, 0, 0, 80, -17, 0, 39, 7, 6, 22, 0, 35, -2, -1, 0, 42, -16, 56, -10, 38, 3, 7, 14, 9, 7, 14]]
	},
	'walkfront': {
		'UP_INS': 10,
		'LOOPINV': -1,
		'USE': [DICT['HEAD'], DICT['HANDS'], DICT['TOL'], DICT['BODY']],
		'CMDS': [
			[],
			[0, 0, -180, 0, 0, 0, 80, -17, 0, 39, 7, 6, 22, 0, 35, -2, -1, 0, 42, -16, 56, -10, 38, 3, 7, 14, 9, 7, 14],
			[0, 0, -180, 0, 0, 0, 80, 2, 0, 39, 7, 6, 22, 0, 35, -2, -1, 0, 42, -16, 56, -10, 38, 3, 7, 14, 9, 7, 14],
			[0, 0, -180, 0, 0, 0, 80, 2, 0, 39, 9, 9, 22, 0, 35, -2, -1, 0, 42, -16, 56, -10, 38, 3, 7, 14, 9, 7, 14],
			[0, 0, -180, 0, 0, 0, 80, 8, 0, 39, 9, 9, 22, 0, 35, -2, -1, 0, 42, -16, 56, -10, 38, 3, 7, 14, 9, 7, 14],
			[0, 0, -180, 0, 0, 0, 80, 8, 0, 39, 9, 9, 22, 0, 50, -2, -1, 0, 42, -16, 56, -10, 255, 3, 6, 14, 1, 7, 14],
			[0, 0, -180, 0, 0, 0, 80, 8, 0, 39, 9, 9, 22, 0, 50, -2, -1, 0, 42, -16, 56, -10, 255, 10, 8, 25, 1, 7, 25],
			[0, 0, -180, 0, 0, 0, 80, 8, 0, 39, 9, 9, 22, 0, 50, -14, -5, 0, 42, -16, 56, -10, 255, 10, 8, 25, 1, 7, 25],
			[0, 0, -104, 0, 0, 0, 80, 8, 0, 39, 9, 9, 22, 0, 50, -14, -5, 0, 42, -16, 56, -10, 255, 10, 8, 25, 1, 7, 25],
			[0, 0, -69, 0, 0, 0, 80, 8, 0, 39, 9, 9, 22, 0, 50, -9, -5, 0, 42, -16, 56, -10, 255, 10, 8, 25, 1, 7, 25],
			[0, 0, -5, 0, 0, 0, 80, 8, 0, 39, 9, 9, 22, 0, 50, -1, -5, 0, 42, -16, 56, -10, 255, 10, 8, 25, 1, 7, 25],
			[0, 0, -5, 0, 0, 0, 80, 8, 0, 39, 9, 9, 22, 0, 10, -1, -5, 0, 42, -16, 56, -10, 255, 10, 8, 6, 1, 7, 6],
			[0, 0, -5, 0, 0, 0, 80, 8, 0, 39, 9, 9, 22, 0, 10, -1, -5, 0, 42, -16, 56, -10, 142, 10, 8, 6, 1, 7, 6],
			[0, 0, -5, 0, 0, 0, 80, -5, 0, 39, 9, 9, 22, 0, 10, -1, -5, 0, 42, -16, 56, -10, 142, 10, 8, 6, 1, 7, 6],
			[0, 0, -5, 0, 0, 0, 80, -5, 0, 39, 7, 6, 22, 0, 10, -1, -5, 0, 42, -16, 56, -10, 142, 10, 8, 6, 1, 7, 6],
			[0, 0, -5, 0, 0, 0, 80, -5, 0, 39, 8, 8, 22, 0, 10, -1, -5, 0, 42, -16, 56, -10, 142, 10, 8, 6, 1, 7, 6],
			[0, 0, -5, 0, 0, 0, 80, -5, 0, 39, 8, 7, 22, 0, 10, -1, -5, 0, 42, -16, 56, -10, 142, 10, 8, 6, 1, 7, 6],
			[0, 0, -5, 0, 0, 0, 80, -5, 0, 39, 7, 6, 22, 0, 10, -1, -5, 0, 42, -16, 56, -10, 142, 10, 8, 6, 1, 7, 6],
			[0, 0, -5, 0, 0, 0, 80, -5, 0, 39, 8, 8, 22, 0, 10, -1, -5, 0, 42, -16, 56, -10, 142, 10, 8, 6, 1, 7, 6],
			[0, 0, -5, 0, 0, 0, 80, -5, 0, 39, 9, 9, 22, 0, 10, -1, -5, 0, 42, -16, 56, -10, 142, 10, 8, 6, 1, 7, 6],
			[0, 0, -5, 0, 0, 0, 80, -5, 0, 39, 9, 6, 22, 0, 10, -1, -5, 0, 42, -16, 56, -10, 142, 10, 8, 6, 1, 7, 6],
			[0, 0, -5, 0, 0, 0, 80, -5, 0, 39, 8, 7, 22, 0, 10, -1, -5, 0, 42, -16, 56, -10, 142, 10, 8, 6, 1, 7, 6]]
	},
	'shakehand1': {  //happy?
		'UP_INS': 10,
		'LOOPINV': 5,
		'USE': [DICT['HANDS']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -8, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -8, 118, 111, 7, 14, 115, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -6, 118, 168, 21, 14, 157, 24, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 59, -6, 118, 168, 21, 25, 157, 24, 25],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -6, 118, 168, 14, 10, 93, 24, 25],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -6, 118, 168, 29, 25, 175, 24, 25],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -6, 118, 58, 34, 25, 175, 3, 11],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -6, 118, 165, 33, 24, 165, 32, 25],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -6, 118, 71, 33, 24, 69, 35, 25],
		]
	},
	'shakehand2': {  //sad
		'UP_INS': 10,
		'LOOPINV': 5,
		'USE': [DICT['HANDS']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 30, 7, 25, 32, 7, 25],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 30, 7, 15, 27, 7, 16],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 9, 36, 25, 8, 36, 25],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 9, -19, 25, 8, -19, 25],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 9, 12, 25, 8, 9, 25],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -9, 118, 9, 12, 2, 14, 13, 1],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -4, 118, 9, 12, -14, 8, 9, -14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 9, 12, 3, 8, 9, 4],
		]
	},
	'shakehand3': {
		'UP_INS': 10,
		'LOOPINV': 10,
		'USE': [DICT['HANDS']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 96, 7, 14, 94, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -15, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 96, 7, 14, 94, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -15, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 175, 7, 14, 175, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -15, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 175, 7, -14, 175, 7, -14],
			[0, 0, 0, 0, 0, 0, 80, -15, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 175, 7, -14, 175, 7, -4],
			[0, 0, 0, 0, 0, 0, 80, -15, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 175, 7, -14, 175, 7, -14],
			[0, 0, 0, 0, 0, 0, 80, -15, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 175, 7, -14, 175, 7, -6],
			[0, 0, 0, 0, 0, 0, 80, -15, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 175, 7, -14, 175, 7, -14],
		]
	},
	'shakehead2': { //sad
		'UP_INS': 10,
		'LOOPINV': 10,
		'USE': [DICT['HEAD']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -5, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, 0, 39, 6, 5, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, -15, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, 8, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, -12, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, 3, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, 3, 39, 7, 5, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, -17, 3, 39, 7, 6, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14]]
	},
	'handgreet': {
		'UP_INS': 10,
		'LOOPINV': 50,
		'USE': [DICT['HANDS']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 89, -19, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 175, 2, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 175, 36, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 175, 36, 13, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 175, 36, -6, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 175, 36, 25, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 175, 36, -12, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 175, 36, 25, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 175, 36, 9, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 121, 21, 9, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 26, 21, 9, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 26, 21, 9, 32, 7, 14],
		]	
	},
	'2handgreet': {
		'UP_INS': 10,
		'LOOPINV': 50,
		'USE': [DICT['HANDS']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 89, -19, 14, 88, -19, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 175, 2, 14, 175, 5, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 175, 36, 14, 175, 36, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 175, 36, 13, 175, 36, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 175, 36, -6, 175, 36, -4],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 175, 36, 25, 175, 36, 25],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 175, 36, -12, 175, 36, -10],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 27, 36, 25, 32, 36, 25],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 58, -10, 118, 26, 21, 9, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 26, 21, 9, 32, 7, 14],
		]
	},
	'shrugsholder1': {
		'UP_INS': 20,
		'LOOPINV': 50,
		'USE': [DICT['HANDS']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -6, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -4, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -4, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -12, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -8, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 32, 7, 14, 32, 7, 14],
		]
	},
	'shrugsholder2': {
		'UP_INS': 20,
		'LOOPINV': 50,
		'USE': [DICT['HANDS']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 1, 32, 7, 1],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -6, 118, 32, 7, 1, 32, 7, 1],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -4, 118, 32, 7, 1, 32, 7, 1],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -4, 118, 32, 7, 1, 32, 7, 1],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 32, 7, 1, 32, 7, 1],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -12, 118, 32, 7, 1, 32, 7, 1],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -8, 118, 32, 7, 1, 32, 7, 1],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 32, 7, 1, 32, 7, 1],
		]
	},
	'handdrop': {
		'UP_INS': 20,
		'LOOPINV': 0,
		'USE': [DICT['HANDS']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 1, 32, 7, 1],
		]
	},
	'handopen': {
		'UP_INS': 20,
		'LOOPINV': 0,
		'USE': [DICT['HANDS']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 57, -10, 118, 32, 7, 14, 32, 7, 14],
		]
	},
	'bodynormal': {
		'UP_INS': 20,
		'LOOPINV': 0,
		'USE': [DICT['BODY']],
		'CMDS': [
			[],
			[0, -10, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
		]
	},
	'xxx': {
		'UP_INS': 10,
		'LOOPINV': 5,
		'USE': [DICT['HANDS']],
		'CMDS': [[],
		[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
		[0, 0, 0, 0, 5, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
		[0, 0, 0, 0, 31, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -9, 118, 94, 7, 14, 32, 7, 14],
		[0, 0, 0, 0, 31, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -9, 118, 139, 7, 14, 32, 7, 14]]
	},
	'beat': {
		'UP_INS': 10,
		'LOOPINV': -1,
		'USE': [DICT['HEAD'], DICT['HANDS'], DICT['TOL'], DICT['BODY']],
		'CMDS': [
			[],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 0, 0, 0, 0, 80, 2, 0, 39, 8, 8, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 51, 0, 0, 0, 80, 2, 0, 39, 8, 8, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 51, 0, 0, 0, 80, 2, 0, 39, 7, 6, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 51, 0, 0, 0, 80, 2, 0, 39, 9, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 51, 0, 0, 0, 80, 2, 0, 39, 9, 9, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 51, 0, 0, 0, 80, 2, 0, 39, 8, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 103, 0, 0, 0, 80, 2, 0, 39, 8, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
			[0, 0, 103, 0, 0, 0, 80, -3, 3, 39, 8, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 147, 36, -2, 32, 7, 14],
			[0, 0, 103, 0, 0, 0, 80, -3, 3, 39, 8, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 75, 36, -2, 88, 7, 14],
			[0, 0, 103, 0, 0, 0, 80, -3, 3, 39, 8, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 111, 36, -2, 147, 33, 14],
			[0, 0, 103, 0, 0, 0, 80, -3, 3, 39, 8, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 144, 36, 2, 88, 36, 16],
			[0, 0, 103, 0, 0, 0, 80, -3, 3, 39, 8, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 83, 36, 2, 164, 36, 16],
			[0, 0, 103, 0, 0, 0, 80, -3, 3, 39, 8, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 144, 33, 2, 83, 36, 16],
			[0, 0, 103, 0, 0, 0, 80, -3, 3, 39, 8, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 92, 33, 2, 160, 36, 16],
			[0, 0, 103, 0, 0, 0, 80, -3, 3, 39, 8, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 22, 33, 2, 20, 36, 16],
			[0, 0, 6, 0, 0, 0, 80, -3, 3, 39, 8, 7, 21, 0, 0, -17, 0, 0, 42, -16, 56, -10, 118, 22, 29, 2, 4, 23, 15],
			[0, 0, 6, 0, 0, 0, 80, -3, 3, 40, 8, 7, 21, 0, 0, -2, 0, 0, 42, -16, 56, -10, 118, 22, 29, 2, 4, 23, 15],
		]
	},
};

//
var ASA = {
	'neutral': [
		[SUB_ASA['roundhead'], SUB_ASA['bodynormal'], SUB_ASA['handopen']],
		[SUB_ASA['blink'], SUB_ASA['flow'], SUB_ASA['shrugsholder2']],
		[SUB_ASA['blink'], SUB_ASA['flow'], SUB_ASA['shrugsholder1']],
		[SUB_ASA['blink'], SUB_ASA['shakebody'], SUB_ASA['handopen']],
		[SUB_ASA['walk']],  //徘徊
		[SUB_ASA['blink'], SUB_ASA['flow'], SUB_ASA['handgreet']],
	],
	'negative': [
		[SUB_ASA['shakehead'], SUB_ASA['flow'], SUB_ASA['handdrop']],
		[SUB_ASA['walkback']],
		[SUB_ASA['shakehand3'], SUB_ASA['shakehead2']],
		[SUB_ASA['itis']], //就是那样
		[SUB_ASA['beat']],
	],
	'positive': [
		[SUB_ASA['shakehand2'], SUB_ASA['blink'], SUB_ASA['shakebody']],
		[SUB_ASA['shakehand1'], SUB_ASA['blink'], SUB_ASA['bodynormal']],
		[SUB_ASA['walkfront']],
		[SUB_ASA['blink'], SUB_ASA['flow'], SUB_ASA['2handgreet']],
	],

};

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                        外部调用接口
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
var his = { "positive": 0, "negative": 0, "neutral": 1 }

function m_random(rg) {
	var randn = parseInt(Math.random() * ASA[rg].length, 10);
	while (his[rg] == randn) {
		randn = parseInt(Math.random() * ASA[rg].length, 10);
	}
	his[rg] = randn
	return randn;
}

function dcr_control(emotion) {
	var randn = 0;
	if (GL_ENABLE_FLG == 0) { return; }
	//console.log(emotion);

	switch (emotion) {
		case "positive":
			randn = m_random("positive");
			GL_ACT.load_action(ASA['positive'][randn]);
			break;
		case "negative":
			randn = m_random("negative");
			GL_ACT.load_action(ASA['negative'][randn]);
			break;
		case "neutral":
			randn = m_random("neutral");
			GL_ACT.load_action(ASA['neutral'][randn]);
			break;
	}
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function test_send_action() {
	var dict = ['positive', 'negative', 'neutral'];
	var randn = parseInt(Math.random() * (dict.length), 10);
	console.log(dict[randn]);
	dcr_control(dict[randn]);
}

function setup() {
	var btn;
	var cnv = createCanvas(400, 500, WEBGL);
	if (_DEBUG != 0) {
		cnv.position(310, (windowHeight - height) / 2 + 40);
	}
	cnv.parent('sketch-holder');

	//
	GL_BOT = new ROBOT();
	GL_ACT = new ACTION();
	//
	if (_DEBUG == 0) {
		//
		GL_ACT.load_action(ASA['neutral'][1]); //初始化动作
		//
		if (GL_DEBUG_SEND == 1) {
			btn = createButton('SEND');
			btn.position(300, 19);
			btn.mousePressed(test_send_action);
		}
	}
	else {
		GL_ACT_TOOL = new TOOL_MAKE_ACTION();
		GL_ACT.load_action([SUB_ASA['INIT']]);
		//GL_ACT.load_action(ASA['neutral'][5]);
		//GL_ACT.load_action(ASA['positive'][3]);
		//GL_ACT.load_action(ASA['angry'][0]);
		//GL_ACT.load_action([SUB_ASA['xxx'], SUB_ASA['roundhead']]);
	}
	//
	frameRate(GL_FRAMERATE);
	GL_ENABLE_FLG = 1;
}

function draw() {
	if (_DEBUG == 0) {
		background("rgba(0,0,0,.0)");
	}
	else {
		if (GL_ACT_SET_FLAG == 1) {
			background(150)
		}
		else {
			background(200);
		}
		orbitControl();
	}

	//灯光
	specularMaterial(255);
	ambientLight(50, 50, 50);
	pointLight(50, 50, 50, 500, 500, -500); //右后
	pointLight(64, 64, 64, 500, 500, 500);  //右前
	//pointLight(50, 50, 50, -500, -500, -500); //左后
	pointLight(50, 50, 50, -500, -500, 500); //左前
	directionalLight(64, 64, 64, 0, 500, 0);

	//标定(0,0,0)
	if (_DEBUG != 0) {
		push();
		fill(color(255,0,0))
		sphere(20,50);
		pop();
	}

	GL_TM_SG += GL_TM_XX;
	if (GL_TM_SG > 1) {
		GL_TM_SG = 0;
		GL_ACT.next()
	}
	GL_BOT.update_seq_cache(GL_ACT.get_current_cmd());  //更新bot内的一条缓存动作命令
	GL_BOT.draw();
}

function estop() {
	GL_TM_SG = 0;
	GL_TM_XX = 0;
	GL_ACT_TEST_FLAG = 0;
}

function estart() {
	GL_TM_SG = 0;
	GL_TM_XX = (GL_EN_IMP == 1) ? 1.5 : 0.15;
}

function analysis_action(acts, use) {
	// 	'move': {
	// 	'UP_INS': 10,
	// 	'USE': ['TOL'],
	// 	'CMDS': [
	// 		[],
	// 		[-79, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
	// 		[56, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14],
	// 		[-1, 0, 0, 0, 0, 0, 80, 0, 0, 39, 7, 7, 21, 0, 0, 0, 0, 0, 42, -16, 56, -10, 118, 32, 7, 14, 32, 7, 14]],
	// },
	//var cutl = [0, 6, 15, 20, 29];
	var cutact = [[]];

	for (var i = 1; i < acts.length; ++i) {
		cutact[i] = [];
		for (var x = 0; x < 29; x++) { cutact[i][x] = 0;}
		for (var x = 0; x < use.length; ++x) {
			for (var j = use[x][0]; j <= use[x][1]; ++j) {
				cutact[i][j] =acts[i][j];
			}
		}
	}
	return cutact;
}

class ACTION_OPER{
	constructor(actdict) {
		this.use = actdict['USE'];
		this.actions = actdict['CMDS'];  //[[],[..],[..]]
		this.upins = actdict['UP_INS'];
		this.loopinv = actdict['LOOPINV'];
		this.loopc = 0;

		this.actspart = [[]];
		this.cmd_len = 29;

		this.idxmin = 0;
		this.curidx = this.idxmin;
		this.inv_acts = [];  //相邻两条命令的差值
		this.inv_acts_min = [];  //帧差的最小值
		this.inv = 0;
		this.cur_inv = 0;

		this.oper_calc_inv_actions();
	}

	oper_restart() {
		this.oper_calc_inv_actions();

		this.curidx = this.idxmin;
		this.inv = 0;
		this.cur_inv = 0;
		this.loopc = 0;
	}

	oper_push(_cseq) {
		var di_flg = 0;
		for (var i = 0; i < _cseq.length || i < this.cmd_len; ++i) {
			if (_cseq[i] != this.actions[this.actions.length - 1][i]) {  //比较与最后一条指令的差异
				di_flg = 1;
				break;
			}
		}
		if (di_flg == 1) {
			this.actions.push(_cseq);
			return 1;
		}
		return 0;
	}

	oper_next() {
		if (GL_EN_IMP == 1) {
			if (_DEBUG == 0 || GL_ACT_TEST_FLAG == 1) {
				if (this.cur_inv < this.inv - 1) {
					this.cur_inv += 1;
					return;
				}
			}
		}
		//一轮结束
		if (this.curidx >= this.actions.length - 1) {
			if (_DEBUG == 2 && GL_ACT_TEST_FLAG == 0) {
				this.curidx = this.idxmin;
				this.loopc = 0;
			}
			else {
				if (GL_CICLE_RUN == 1 && this.loopc >= this.loopinv && this.loopinv != -1) {
					this.curidx = this.idxmin;
					this.loopc = 0;
				}
				else {
					this.loopc += 1;  //一轮结束
				}
			}
		}
		else {
			this.curidx += 1;
		}
		//
		if (GL_EN_IMP == 1 && (_DEBUG == 0 || GL_ACT_TEST_FLAG == 1)) {
			this.cur_inv = 1;
			this.inv = this.inv_acts_min[this.curidx];
		}
		else {
			this.cur_inv = 0;
		}
	}

	oper_last() { //只在调试的时候用
		if (_DEBUG == 0) { return; }
		//
		if (this.curidx <= 0) {
			this.curidx = this.actions.length - 1;
		}
		else { this.curidx -= 1;}
	}

	oper_get_cur_cmd() {
		if (GL_ACT_MAKE_FLAG == 1) {
			if (this.cur_inv == 0 || this.curidx == this.actions.length - 1) {
				return this.actspart[this.curidx];
			}
	
			if (!(_DEBUG == 0 || GL_ACT_TEST_FLAG == 1)) {
				return this.actspart[this.curidx];
			}
		}
		else {
			if (this.cur_inv == 0 || this.curidx == this.actions.length - 1) {
				return this.actions[this.curidx];
			}
	
			if (!(_DEBUG == 0 || GL_ACT_TEST_FLAG == 1)) {
				return this.actions[this.curidx];
			}
		}
		
		var cmd = [];
		for (var i = 0; i < this.actspart[this.curidx].length; ++i){
			cmd[i] = this.actspart[this.curidx][i] + this.inv_acts[this.curidx][i] * this.cur_inv / this.inv;
		}
		return cmd;
	}

	oper_replace_cur_cmd(_cseq) {
		if (_cseq.length == this.cmd_len) {
			this.actions[this.curidx] = _cseq;
			//this.oper_calc_inv_actions();
		}
	}

	oper_kick_cur_cmd() {
		if (this.actions.length - 1 > 0) {
			for (var i = this.curidx; i < this.actions.length - 1; ++i){
				this.actions[i] = this.actions[i + 1];
			}
			this.actions.pop();
			if (this.curidx > this.actions.length - 1) {
				this.curidx = this.actions.length - 1;
			}
		}
	}

	oper_calc_inv_actions() {
		var _tmp_min;
		this.inv_acts = [];
		this.inv_acts_min = [];
		this.actspart = analysis_action(this.actions, this.use);

		this.inv_acts[0] = this.actspart[1];
		this.inv_acts_min[0] = 1;
		for (var i = 2; i < this.actspart.length; ++i) {
			this.inv_acts[i - 1] = [];
			_tmp_min = 255;
			for (var j = 0; j < this.actspart[i].length; ++j) {
				this.inv_acts[i - 1][j] = this.actspart[i][j] - this.actspart[i - 1][j];
				if (abs(this.inv_acts[i - 1][j]) >= 1) {
					if (_tmp_min > abs(this.inv_acts[i - 1][j])) {
						_tmp_min = abs(this.inv_acts[i - 1][j]);
					}
				}
			}
			if (_tmp_min > this.upins) { _tmp_min = this.upins; }
			this.inv_acts_min[i - 1] = _tmp_min;
		}
		this.inv_acts_min[this.actspart.length - 1] = 0;
	}
}

class ACTION {
	constructor() {
		this.dbg_act_oper_idx = -1;
		this.act_opers = []  //多指令集合
	}

	load_action(mul_acts) {
		//[[[],[ssss]], [[],[sss]], [[],[ssss]]]
		this.act_opers = [];
		
		for (var i = 0; i < mul_acts.length; ++i) {
			this.act_opers[i] = new ACTION_OPER(mul_acts[i]);
		}
		if (mul_acts.length == 1 && mul_acts[0]['CMDS'].length == 1) {
			this.dbg_act_oper_idx = 0; //默认调试0号	
		}
	}

	get_cur_actions() {
		if (this.dbg_act_oper_idx < 0) { return []; }
		return this.act_opers[this.dbg_act_oper_idx].actions;
	}

	get_cur_curidx() {
		if (this.dbg_act_oper_idx < 0) { return -1; }
		return this.act_opers[this.dbg_act_oper_idx].curidx;
	}

	act_oper_next() {
		if (this.dbg_act_oper_idx < 0) { this.dbg_act_oper_idx = 0; }
		else {
			this.dbg_act_oper_idx = (this.dbg_act_oper_idx + 1) % this.act_opers.length;
		}
		GL_ACT_MAKE_FLAG = 0;
		console.log(this.act_opers[this.dbg_act_oper_idx].use);
		console.log("oper:" + str(this.dbg_act_oper_idx));
	}

	last() {
		if (this.dbg_act_oper_idx < 0) { return; }
		this.act_opers[this.dbg_act_oper_idx].oper_last();
	}

	next() {
		if (this.shift_oper < 0) {
			return;
		}

		for (var i = 0; i < this.act_opers.length; ++i){
			this.act_opers[i].oper_next();
			//console.log(str(this.act_opers[i].curidx) + "  " + str(this.act_opers[i].cur_inv));
		}
	}

	get_current_cmd_non() {
		if (this.dbg_act_oper_idx < 0) { return []; }
		var tt = this.act_opers[this.dbg_act_oper_idx].oper_get_cur_cmd();
		var aa = [];
		for (var i = 0; i < tt.length; ++i){
			aa[i] = tt[i];
		}
		return aa;
	}

	get_current_cmd() {
		// if (!(_DEBUG == 0 || GL_ACT_TEST_FLAG == 1)) {
		// 	//console.log("a");
		// 	//return this.act_opers[0].get_cur_cmd();
		// }
		//console.log(cmd_len);
		if (this.act_opers.length <= 0) {
			return [];
		}

		if (GL_ACT_TEST_FLAG == 1 || _DEBUG == 0) {
			var tt = this.act_opers[0].oper_get_cur_cmd();
			var cmd_len = this.act_opers[0].cmd_len;

			var inv_cmd = [];
			if (tt.length == 0) {
				for (var i = 0; i < cmd_len; ++i) { inv_cmd[i] = 0;}
			}
			else {
				for (var i = 0; i < cmd_len; ++i) { inv_cmd[i] = tt[i];}
			}
			//
			for (var i = 1; i < this.act_opers.length; ++i) {
				var tmp = this.act_opers[i].oper_get_cur_cmd();
				if (tmp.length == 0) { return inv_cmd;}
				else {
					for (var j = 0; j < cmd_len; ++j) {
						inv_cmd[j] = inv_cmd[j] + tmp[j];
					}
				}
			}
			return inv_cmd;
		}
		else if (GL_ACT_TEST_FLAG == 0 && _DEBUG == 2) {
			return this.get_current_cmd_non();
		}
		return [];
	}

	push_1_cmd(_cseq) {
		if (this.dbg_act_oper_idx < 0) { return; }
		return this.act_opers[this.dbg_act_oper_idx].oper_push(_cseq);
	}

	pretest() {
		for (var i = 0; i < this.act_opers.length; ++i){
			this.act_opers[i].oper_restart();
		}
	}

	replace_current_cmd(_cseq) { 
		if (this.dbg_act_oper_idx < 0) { return; }
		this.act_opers[this.dbg_act_oper_idx].oper_replace_cur_cmd(_cseq);
	 }

	kick_current_cmd() {
		if (this.dbg_act_oper_idx < 0) { return; }
		this.act_opers[this.dbg_act_oper_idx].oper_kick_cur_cmd();
	}
};

class TOOL_MAKE_ACTION {
	constructor() {
		if (_DEBUG == 2 || _DEBUG == 1) { estop(); }
		
		var btn_dict = [
			["P_VALS", 520, this.console_print_values],
			["s/PUSH", 20, this.action_seq],
			["KICK", 100, this.kick_current],
			["LAST", 170, this.test_last],
			["NEXT", 240, this.test_next],
			["s/REPLACE", 310, this.test_replace],
			["TEST", 430, this.execute_test],
			["S_OPER", 600, this.oper_shift],
		];

		var btn;
		if (_DEBUG == 2) {
			for (var i = 0; i < btn_dict.length; ++i){
				btn = createButton(btn_dict[i][0]);
				btn.position(btn_dict[i][1], 19);
				btn.mousePressed(btn_dict[i][2]);
			}
		}
		else if (_DEBUG == 1) {
			btn = createButton(btn_dict[0][0]);
			btn.position(btn_dict[0][1], 19);
			btn.mousePressed(btn_dict[0][2]);
		}
	}

	oper_shift() {
		estop();
		GL_ACT.act_oper_next()
	}

	console_print_values() {
		var actvals = GL_BOT.get_action_values();
		//console.log(actvals);
		console.log(
			"bot:[" + actvals[0] + "]" +
			"  head:[" + actvals[1] + "]" +
			"  body:[" + actvals[2] + "]" +
			"  hand:[" + actvals[3] + "]"
		);
		var ll = actvals[0].concat(actvals[1]).concat(actvals[2]).concat(actvals[3]);
		console.log(ll);
	}

	action_seq() {
		if (GL_ACT_SET_FLAG == 0) {
			GL_ACT_SET_FLAG = 1;
			console.log(GL_ACT.get_cur_actions());
		}
		else {
			var seq = GL_BOT.make_action_1_seq();
			var re = GL_ACT.push_1_cmd(seq);
			if (re == 1) {
				console.log(GL_ACT.get_cur_actions());
			}
		}
	}

	kick_current() {
		GL_ACT_MAKE_FLAG = 0;
		GL_ACT.kick_current_cmd();
		console.log(GL_ACT.get_cur_actions());
		console.log(GL_ACT.get_cur_curidx());
	}

	test_last() {
		estop();

		GL_ACT_TEST_FLAG = 0;
		GL_ACT_SET_FLAG = 0;
		GL_ACT_MAKE_FLAG = 0;
		//
		GL_ACT.last();
		console.log(GL_ACT.get_cur_curidx());
		//
		GL_BOT.set_action_slider(GL_ACT.get_current_cmd_non());
	}

	test_next() {
		estop();

		GL_ACT_TEST_FLAG = 0;
		GL_ACT_SET_FLAG = 0;
		GL_ACT_MAKE_FLAG = 0;
		//
		GL_ACT.next();
		console.log(GL_ACT.get_cur_curidx());
		//
		GL_BOT.set_action_slider(GL_ACT.get_current_cmd_non());
	}

	test_replace() {
		var seq;
		if (GL_ACT_SET_FLAG == 0) {
			GL_ACT_SET_FLAG = 1;
		}
		else {
			seq = GL_BOT.make_action_1_seq();
			GL_ACT.replace_current_cmd(seq);

			console.log(GL_ACT.get_cur_actions());
			console.log(GL_ACT.get_cur_curidx());
		}
	}

	execute_test() {
		GL_ACT_SET_FLAG = 0;
		GL_ACT_MAKE_FLAG = 1;
		GL_ACT_TEST_FLAG = 1;
		GL_ACT.pretest();
		estart();
	}
}

class ROBOT {
	constructor() {
		this.head = new HEAD();
		this.body = new BODY();
		this.hands = new HANDS();
		//
		this.dbgval = [];
		this.dbgspan = [];
		this.opmap = {
			'BOT_TX': 0,
			'BOT_TY': 1,
			'BOT_TZ': 2,
			'BOT_RX': 3,   //<0 尾巴往后,>0尾巴往前
			'BOT_RY': 4,  //->0+ 顺时针
			'BOT_RZ': 5,  //->0+ 顺时针
		};
		this.opval = [0, 0, 0, 0, 0, 0];
		this.opmap_keys = Object.keys(this.opmap);
		this.create_slider(this.opval);

		this.actkeys = [this.opmap_keys, this.head.opmap_keys, this.body.opmap_keys, this.hands.opmap_keys];
		this.actkeys_sequence = this.actkeys[0].concat(this.actkeys[1]).concat(this.actkeys[2]).concat(this.actkeys[3]);
		this.actskeys_count = [
			this.actkeys[0].length, this.actkeys[1].length,
			this.actkeys[2].length, this.actkeys[3].length,
		];
		this.actskeys_count_sum = [];
		this.actskeys_count_sum[0] = 0;
		for (var i = 1; i < 4; i++){
			this.actskeys_count_sum[i] = this.actskeys_count_sum[i - 1] + this.actskeys_count[i - 1];
		}
		this.seq_cache = []; //当前缓存命令  25位
	}

	create_slider(init_v) {
		if (_DEBUG == 1 || _DEBUG == 2) {
			var text_span;
			
			for (var i = 0; i < 3; i++) {
				this.dbgval[i] = createSlider(-180, 180, init_v[i], 1);
				this.dbgval[i].position(10, 60 + 20 * i);
				this.dbgspan[i] = createSpan(str(i) + "#" + this.opmap_keys[i]);
				this.dbgspan[i].position(this.dbgval[i].x + this.dbgval[i].width + 10, this.dbgval[i].y);	
			}
			for (var i = 3; i < 6; i++) {
				this.dbgval[i] = createSlider(-180, 180, init_v[i], 1);
				this.dbgval[i].position(300, 60 + 20 * (i - 3));
				this.dbgspan[i] = createSpan(str(i) + "#" + this.opmap_keys[i]);
				this.dbgspan[i].position(this.dbgval[i].x + this.dbgval[i].width + 10, this.dbgval[i].y);	
			}
		}
	}

	//默认传入的为全部的顺序参数
	reset_slider(actvals) { //[]
		if (_DEBUG == 2) {
			//先销毁
			for (var i = 0; i < this.opmap_keys.length; ++i){
				this.dbgval[i].remove();
				this.dbgspan[i].remove();
			}
			this.create_slider(actvals);
		}
	}

	get_action_values() {
		var act_vals = [];
		act_vals[0] = this.opval;
		act_vals[1] = this.head.get_actvals(this.actkeys[1]);
		act_vals[2] = this.body.get_actvals(this.actkeys[2]);
		act_vals[3] = this.hands.get_actvals(this.actkeys[3]);
		return act_vals;
	}

	set_action_slider(actseq) {
		//解析命令
		//actskeys_count
		var actvals = [];
		var idx = 0;
		if (actseq.length >= this.actkeys_sequence.length) {
			for (var i = 0; i < this.actskeys_count.length; ++i){
				actvals[i] = [];
				for (var j = 0; j < this.actskeys_count[i]; ++j){
					actvals[i].push(actseq[idx]);
					idx += 1;
				}
			}
			this.reset_slider(actvals[0]);
			this.head.reset_slider(actvals[1]);
			this.body.reset_slider(actvals[2]);
			this.hands.reset_slider(actvals[3]);
		}
	}

	make_action_1_seq() {
		var actvals = this.get_action_values();
		var act_1_seq = this.opval.concat(actvals[1]).concat(actvals[2]).concat(actvals[3]);
		return act_1_seq;
	}

	decode_seq(act1seq) {
		var k = 0;
		var res = [[], [], [], []];
		if (act1seq.length >= this.actkeys_sequence.length) {
			for (var i = 0; i < this.actskeys_count.length; ++i) {
				res[i] = [];
				for (var j = 0; j < this.actskeys_count[i]; ++j) {
					res[i].push(act1seq[k]);
					k++;
				}
			}
		}
		return res;
	}

	update_seq_cache(_act1seq) {
		//var DICT = { 'TOL': [0, 5], 'HEAD': [6, 14], 'BODY': [15, 19], 'HANDS': [20, 28] };
		var x = 0;
		// for (var i = 0; i <= 3; ++i){
		// 	for (var j = 0; j < this.actskeys_count[i]; ++j){
		// 		if (_act1seq[j + this.actskeys_count_sum[i]] != 0) {
		// 			x += 1;
		// 			break;
		// 		}
		// 	}
		// }
		// if (x >= 3) {
		// 	this.seq_cache = _act1seq;
		// }
		for (var i = 20; i <= 28; ++i) { //?
			if (_act1seq[i] != 0) {
				x = 1;
				break;
			}
		}
		if (x == 1) {
			for (var i = 0; i < _act1seq.length; ++i){
				if (_act1seq[i] != 0) {
					this.seq_cache = _act1seq;
					break;
				}
			}
		}
		
	} //[]

	draw() {
		//解析动作指令
		var anls_seqs = this.decode_seq(this.seq_cache); //[][]
		//调试用
		if (_DEBUG == 1 || (_DEBUG == 2 && GL_ACT_SET_FLAG == 1)) {
			for (var i = 0; i < this.opmap_keys.length; i++) {
				this.opval[i] = this.dbgval[i].value();
			}
		}
		else {
			for (var i = 0; i < anls_seqs[0].length; ++i) {
				this.opval[i] = anls_seqs[0][i];
			}
		}
		//绘制
		push();
		translate(this.opval[this.opmap['BOT_TX']], this.opval[this.opmap['BOT_TY']], this.opval[this.opmap['BOT_TZ']]);
		scale(GL_SCALE);
		rotateX(PI / 180 * this.opval[this.opmap['BOT_RX']] - PI / 180 * 10); //11.24
		rotateY(PI / 180 * this.opval[this.opmap['BOT_RY']]);
		rotateZ(PI / 180 * this.opval[this.opmap['BOT_RZ']]);
		//绘制头
		this.head.update(this.actkeys[1], anls_seqs[1]);
		this.head.draw();
		//绘制身体
		// let c = color(100, 100, 100);
		// fill(c);
		this.body.update(this.actkeys[2], anls_seqs[2]);
		this.body.draw();
		//绘制手臂
		this.hands.update(this.actkeys[3], anls_seqs[3]);
		this.hands.draw();
		pop();
	}
}

class BOT_PART {
	constructor(_DBGY0, _opmap, _opval, _oplmt, _parmidx) {
		this._DEBUGy0 = _DBGY0; //调试滑块起始位置
		this.dbgval = [];
		this.dbgspan = [];
		//
		this.opmap = _opmap;
		this.opval = _opval;
		this.oplmt = _oplmt;
		//
		this.opmap_keys = Object.keys(this.opmap);
		this.slidename = [];
		for (var i = 0; i < this.opmap_keys.length; ++i){
			this.slidename[i] = str(_parmidx + i) + "#" + this.opmap_keys[i];
		}
		this.component_count = Object.getOwnPropertyNames(this.opmap).length;
		this.create_slider(this.opval, this._DEBUGy0);
	}

	create_slider(init_v, slider_y0) {
		if (_DEBUG == 1 || _DEBUG == 2) {
			var text_span;
			var min_v = 0, max_v = 0;
			for (var i = 0; i < this.component_count; i++) {
				min_v = -180;
				max_v = 180;
				if (_DEBUG == 2) {
					min_v = this.oplmt[i][0];
					max_v = this.oplmt[i][1];
				}
				this.dbgval[i] = createSlider(min_v, max_v, init_v[i], 1);
				this.dbgval[i].position(10, slider_y0 + 20 * i);
				this.dbgspan[i] = createSpan(this.slidename[i]);
				this.dbgspan[i].position(this.dbgval[i].x + this.dbgval[i].width + 10, this.dbgval[i].y);
			}
		}
	}

	reset_slider(actval) {
		if (_DEBUG == 2) {
			for (var i = 0; i < this.component_count; ++i) {
				this.dbgval[i].remove();
				this.dbgspan[i].remove();
			}
			this.create_slider(actval, this._DEBUGy0);
		}
	}

	update(actkeys, actval) {
		var idx = 0;
		if (_DEBUG == 0 || (_DEBUG == 2 && GL_ACT_SET_FLAG == 0)) {
			for (var i = 0; i < actkeys.length; ++i) {
				idx = this.opmap[actkeys[i]];
				if (actval.length <= i) { break; }
				if (actval[i] <= this.oplmt[idx][1] && actval[i] >= this.oplmt[idx][0]) {
					this.opval[idx] = actval[i];
				}
			}
		}
		else {
			for (var i = 0; i < this.component_count; i++) {
				this.opval[i] = this.dbgval[i].value();
			}
		}
	}

	get_actvals(actkeys) {
		var actval = [];
		for (var i = 0; i < actkeys.length; ++i) {
			actval[i] = this.opval[this.opmap[actkeys[i]]];
		}
		return actval;
	}

	draw() { console.log("there is nothing ^o^");}
}

class BODY extends BOT_PART {
	constructor() {
		var OPER = {
			'map': {
				'BODY_RX': 0,   //<0 尾巴往后,>0尾巴往前
				'BODY_RY': 1,  //->0+ 顺时针
				'BODY_RZ': 2,  //->0+ 顺时针
				'BODY_D': 3,   //胖瘦
				'BODY_TY': 4,  //up or down  ->0+ 上升
			},
			'val': [0, 0, 0, 42, -16],
			'lmt': [
				[-17, 16],
				[-180, 180],
				[-6, 6],
				[40, 42],
				[-20, -15]
			],
		};
		super(145, OPER['map'], OPER['val'], OPER['lmt'], 15);
	}

	draw() {
		var H = this.opval[this.opmap['BODY_D']] * 1.5;;
		var xx_correct, xy_correct, xz_correct;
		var zx_correct, zy_correct, zz_correct;
		var x_angle, z_angle;

		push();
		noStroke();
		//
		x_angle = PI / 180 * this.opval[this.opmap['BODY_RX']];
		rotateX(x_angle);
		xx_correct = 0;
		xy_correct = H / 2 - H / 2 * cos(x_angle);
		xz_correct = H / 2 * sin(x_angle);
		translate(xx_correct, xy_correct, xz_correct);
		//
		rotateY(PI / 180 * this.opval[this.opmap['BODY_RY']]);
		//
		z_angle = PI / 180 * this.opval[this.opmap['BODY_RZ']];
		rotateZ(z_angle);
		zx_correct = -H / 2 * sin(z_angle);
		zy_correct = -H / 2 + H / 2 * cos(z_angle);
		zz_correct = 0;
		translate(zx_correct, zy_correct - this.opval[this.opmap['BODY_TY']], zz_correct);
		noStroke();
		ellipsoid(this.opval[this.opmap['BODY_D']], H, this.opval[this.opmap['BODY_D']], 50, 50);
		push();
		translate(0, -20, 0);
		rotateX(PI / 2);
		noStroke();
		torus(3, this.opval[this.opmap['BODY_D']], 50, 50);
		pop();
		push();
		translate(0, -37, 0);
		rotateX(PI / 2);
		noStroke();
		torus(18, 25, 50, 50);
		pop();
		pop();
	}
}

class HANDS extends BOT_PART {
	constructor() {
		var OPER = {
			'map': {
				'HAND_DIS': 0,
				'HAND_TY': 1,   //手臂上下位置
				'HAND_COLOR': 2,   //手臂颜色
				'HAND_L_RX': 3,  //->0+ 前摆
				'HAND_L_RY': 4,
				'HAND_L_RZ': 5,  //->0+ 打开
				'HAND_R_RX': 6,  //->0+ 前摆
				'HAND_R_RY': 7,
				'HAND_R_RZ': 8,  //->0+ 打开
			},
			'val': [56, -10, 118, 32, 7, 14, 32, 7, 14],
			'lmt': [
				[54, 60],
				[-12, -4],
				[0, 255],
				[-25, 175],
				[-19, 36],
				[-14, 25],
				[-25, 175], //与H1相同
				[-19, 36],
				[-14, 25],
			],
		};
		super(480, OPER['map'], OPER['val'], OPER['lmt'], 20);
	}

	draw() {
		var L = 45; //长度
		var W = 16; //宽度
		var C = 8;  //厚度
		var x_angle = 0;
		var z_angle = 0;

		push();
		translate(-this.opval[this.opmap['HAND_DIS']], -this.opval[this.opmap['HAND_TY']], 0);
		x_angle = PI / 180 * this.opval[this.opmap['HAND_L_RX']];
		rotateX(x_angle);
		translate(0, L / 2 - L / 2 * cos(x_angle), L / 2 * sin(x_angle));  //支点转移
		rotateY(PI / 180 * this.opval[this.opmap['HAND_L_RY']]);
		z_angle = PI / 180 * this.opval[this.opmap['HAND_L_RZ']];
		rotateZ(z_angle);
		translate(-(L / 2) * sin(z_angle), L / 2 - L / 2 * cos(z_angle), 0);
		fill(this.opval[this.opmap['HAND_COLOR']]);
		noStroke();
		ellipsoid(C, L, W, 50, 50);
		pop();

		push();
		translate(this.opval[this.opmap['HAND_DIS']], -this.opval[this.opmap['HAND_TY']], 0);
		x_angle = PI / 180 * this.opval[this.opmap['HAND_R_RX']];
		rotateX(x_angle);
		translate(0, L / 2 - L / 2 * cos(x_angle), L / 2 * sin(x_angle));
		rotateY(-PI / 180 * this.opval[this.opmap['HAND_R_RY']]);
		z_angle = PI / 180 * this.opval[this.opmap['HAND_R_RZ']];
		rotateZ(-z_angle);
		translate(L / 2 * sin(z_angle), L / 2 - L / 2 * cos(z_angle), 0);
		fill(this.opval[this.opmap['HAND_COLOR']]);
		noStroke();
		ellipsoid(C, L, W, 50, 50);
		pop();
	}
}

class HEAD extends BOT_PART {
	constructor() {
		var OPER = {
			'map': {
				'HEAD_TY': 0,   //->0+ 上升
				'HEAD_RX': 1,
				'HEAD_RY': 2,
				'HEAD_H_D': 3, //头的直径
				'HEAD_E_W': 4, //眼睛宽度
				'HEAD_E_H': 5, //眼睛高度
				'HEAD_E_ANGLE': 6, //眼睛夹角
				'HEAD_E_TY': 7,    //眼睛上下移动 不是角度哦
				'HEAD_E_COLOR': 8, //眼睛的颜色
			},
			'val': [80, 0, 0, 39, 7, 7, 21, 0, 0],
			'lmt': [
				[78, 82],
				[-17, 17],
				[-30, 30],
				[37, 45],
				[5, 10],
				[2, 10],
				[17, 27],
				[-4, 4],
				[0, 50],
			],
		};
		super(270, OPER['map'], OPER['val'], OPER['lmt'], 6);
	}

	draw() {
		var head_h = 28;  //头部厚度
		var e_half_dis_x = 0;
		var e_z = 0, e_z_1 = 0;
		//var atan_v = 0;

		push();
		translate(0, -this.opval[this.opmap['HEAD_TY']], 0);
		rotateX(PI / 180 * this.opval[this.opmap['HEAD_RX']]);// c2
		rotateY(PI / 180 * this.opval[this.opmap['HEAD_RY']]);// c3
		//HEAD
		noStroke();
		ellipsoid(this.opval[this.opmap['HEAD_H_D']], head_h, this.opval[this.opmap['HEAD_H_D']], 50, 50);
		//EYE
		fill(this.opval[this.opmap['HEAD_E_COLOR']]);
		e_half_dis_x = this.opval[this.opmap['HEAD_H_D']] * sin(PI / 180 * this.opval[this.opmap['HEAD_E_ANGLE']])
		e_z = this.opval[this.opmap['HEAD_H_D']] * cos(PI / 180 * this.opval[this.opmap['HEAD_E_ANGLE']])
		e_z_1 = this.opval[this.opmap['HEAD_H_D']] / 2 - sqrt(this.opval[this.opmap['HEAD_H_D']] * this.opval[this.opmap['HEAD_H_D']] * (1 - 4 * this.opval[this.opmap['HEAD_E_TY']] * this.opval[this.opmap['HEAD_E_TY']] / head_h / head_h)) / 2;
		push();
		translate(-e_half_dis_x, -this.opval[this.opmap['HEAD_E_TY']], e_z - e_z_1);
		//???
		// var a = this.opval[this.opmap['HEAD_H_D']] / 2;
		// var b = head_h / 2;
		// var xxx = sqrt((1 - this.opval[this.opmap['HEAD_E_TY']] * this.opval[this.opmap['HEAD_E_TY']] / b / b) * a * a);
		// var aaa = atan(-b*b*xxx/this.opval[this.opmap['HEAD_E_TY']]/a/a);
		// rotateX(PI/2-aaa);
		rotateY(-PI / 180 * this.opval[this.opmap['HEAD_E_ANGLE']]);
		noStroke();
		ellipsoid(this.opval[this.opmap['HEAD_E_W']], this.opval[this.opmap['HEAD_E_H']], 3, 50, 50);
		//sphere(this.opval[this.opmap['HEAD_E_W']]);
		pop();
		push();
		translate(e_half_dis_x, -this.opval[this.opmap['HEAD_E_TY']], e_z - e_z_1);
		rotateY(PI / 180 * this.opval[this.opmap['HEAD_E_ANGLE']]);
		noStroke();
		ellipsoid(this.opval[this.opmap['HEAD_E_W']], this.opval[this.opmap['HEAD_E_H']], 3, 50, 50);
		//sphere(this.opval[this.opmap['HEAD_E_W']]);
		pop();
		pop();
	}
}
